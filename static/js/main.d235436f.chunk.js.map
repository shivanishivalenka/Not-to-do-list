{"version":3,"sources":["Search.js","List.js","App.js","reportWebVitals.js","index.js"],"names":["Search","props","addItem","text","setText","inputerror","type","value","onChange","e","target","onClick","List","items","setItems","map","item","index","filter","indexOf","App","useState","setInputError","dispError","className","includes","concat","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAeeA,EAbA,SAACC,GACZ,IAAOC,EAAmCD,EAAnCC,QAAQC,EAA2BF,EAA3BE,KAAKC,EAAsBH,EAAtBG,QAAQC,EAAcJ,EAAdI,WAC5B,OACI,gCACI,uBAAOC,KAAO,OACdC,MAASJ,EACTK,SAAY,SAACC,GAAD,OAAKL,EAAQK,EAAEC,OAAOH,UAClC,wBAAQI,QAAWT,EAAnB,kBACA,4BAAIG,QCwBDO,EAlCF,SAACX,GACV,IAAOY,EAAkBZ,EAAlBY,MAAMC,EAAYb,EAAZa,SAMb,OACI,8BACA,6BACKD,EAAME,KAAI,SAACC,EAAKC,GAAN,OAER,8BACI,+BAAKD,EACL,wBAAQT,MAASS,EAAML,QAAW,SAACF,GAC9BK,EAASD,EAAMK,QAAO,SAAAF,GAAI,OAAIH,EAAMM,QAAQH,KAAUC,OAD3D,uBAFQA,WCsCZG,MA9Cf,WACE,MAAuBC,mBAAS,IAAhC,mBAAOlB,EAAP,KAAYC,EAAZ,KACA,EAAyBiB,mBAAS,IAAlC,mBAAOR,EAAP,KAAaC,EAAb,KACA,EAAmCO,mBAAS,IAA5C,mBAAOhB,EAAP,KAAkBiB,EAAlB,KAiBMC,EAAY,WAChBD,EAAc,+BAGhB,OACE,sBAAKE,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACAX,MAASA,EACTC,SAAYA,EACZZ,QAzBY,WACD,KAATC,EACFoB,IAEOV,EAAMY,SAAStB,GACtBmB,EAAc,sCAGhBA,EAAc,IACdR,EAASD,EAAMa,OAAOvB,MAiBpBA,KAAQA,EACRC,QAAWA,EACXC,WAAcA,EACdiB,cAAiBA,IAEjB,cAAC,EAAD,CACAT,MAASA,EACTV,KAAQA,EAERW,SAAYA,QChCHa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d235436f.chunk.js","sourcesContent":["// import { useState } from 'react'\r\n\r\nconst Search = (props) =>{\r\n    const {addItem,text,setText,inputerror} = props;\r\n    return (\r\n        <div>\r\n            <input type = \"text\" \r\n            value = {text}\r\n            onChange = {(e)=>setText(e.target.value)}></input>\r\n            <button onClick = {addItem} >ADD </button>\r\n            <p>{inputerror}</p>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Search;","const List = (props) =>{\r\n    const {items,setItems} = props\r\n    // const removal = (e) =>{\r\n    //     items.pop(e.target.value)\r\n\r\n\r\n    // }\r\n    return (\r\n        <div>\r\n        <ul>\r\n            {items.map((item,index) =>(\r\n                \r\n               <div key = {index}> \r\n                   <li>{item} \r\n                   <button value = {item} onClick = {(e)=>{\r\n                        setItems(items.filter(item => items.indexOf(item) !== index))\r\n                       \r\n                   }}\r\n                    //    setItems(items.filter(item => items.indexOf(item) != index))\r\n                    >Clear</button></li>\r\n                   \r\n                </div> \r\n                \r\n                \r\n                \r\n                \r\n                \r\n                \r\n            ) )\r\n            }\r\n        </ul>\r\n        </div>\r\n    )\r\n}\r\nexport default List;","import './App.css';\nimport Search from './Search';\nimport List from './List';\nimport {useState} from 'react';\nfunction App() {\n  const [text,setText] = useState('')\n  const [items,setItems] = useState([])\n  const [inputerror,setInputError] = useState('')\n  \n  const addItem = () => {\n    if (text === '') {\n      dispError();\n    }\n    else if (items.includes(text)){\n      setInputError('Thats already on the list Idiot!!')\n    }\n    else{\n    setInputError('');\n    setItems(items.concat(text));\n    // console.log(text)s\n    // console.log(items)\n    }\n  }\n\n  const dispError = () =>{\n    setInputError('Write something you eejit!')\n  }\n  \n  return (\n    <div className=\"App\">\n      <h1>To-not-do List!</h1>\n      <Search \n      items = {items}\n      setItems = {setItems}\n      addItem = {addItem}\n      text = {text}\n      setText = {setText}\n      inputerror = {inputerror}\n      setInputError = {setInputError}\n      />\n      <List \n      items = {items}\n      text = {text}\n      \n      setItems = {setItems}/>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}